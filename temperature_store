ruleset temperature_store {
  meta {
    use module io.picolabs.subscription alias subscription
    
    provides  temperatures,threshold_violations, inrange_temperatures
    shares __testing,clear_temperatures,temperatures, threshold_violations, inrange_temperatures
  }
  global {
    __testing = { "queries":
      [ { "name": "__testing" },
        { "name": "temperatures"},
        { "name": "threshold_violations"},
        { "name": "inrange_temperatures"}
      ] , "events":
      [ { "domain": "sensor", "type": "reading_reset"},
        { "domain": "wovyn", "type": "new_temperature_reading", "attrs": [ "temperature", "timestamp"] },
        { "domain": "wovyn", "type": "threshold_violation", "attrs": ["temperature","timestamp"]}
      ]
    }
    
    
    temperatures = function() {
      result = ent:my_temperatures.defaultsTo([]);
      result
    }
    
    
    threshold_violations = function() {
      result = ent:my_violations.defaultsTo([]);
      result
    }
    
    
    inrange_temperatures = function() {
      
      result = (ent:my_temperatures != null) => ent:my_temperatures.filter(function(x) {
        ent:my_violations.none(function(y) {y == x})
      }) | [];
     
      result
    }
    
  }
  
  rule send_report {
    select when wovyn notified_need_report
    foreach subscription:established().filter(function(v){v{"Rx_role"} == "SensorManager"})
                                      .map(function(v){v{"Tx"}}) setting (x)
    pre {
      temperatures = ent:my_temperatures.defaultsTo([]);
    }
    
    
      event:send({"eci": x, "domain":"sensor", "type":"receive_report", "attrs":{"reportNumber":event:attr("reportNumber"), "temperatures": temperatures}});
    
    
  }
  
  
  rule collect_temperatures {
    select when wovyn new_temperature_reading
    
    pre {
      temperature = event:attr("temperature").klog("temp: ");
      timestamp = event:attr("timestamp").klog("time: ");
    }
    
    send_directive("say", {"something": "temp and time recieved"});
    
    always {
      temp = [[timestamp, temperature]];
      ent:my_temperatures := (ent:my_temperatures != null) => ent:my_temperatures.append(temp) | temp;
     
      
     
    }
    
    
  }
  
  
  
  
    rule collect_threshold_violations {
    select when wovyn threshold_violation
    
    pre {
      temperature = event:attr("temperature");
      timestamp = event:attr("timestamp");
    }
    
    send_directive("say", {"something": "temp violated!"});
    
    always {
      temp = [[timestamp, temperature]];
      ent:my_violations := (ent:my_violations != null) => ent:my_violations.append(temp) | temp;
     
      
    }
  }
  
  
    rule clear_temperatures {
    select when sensor reading_reset
    
    send_directive("say", {"something": "data cleared!"});
    
    always {
      clear ent:my_temperatures;
      clear ent:my_violations;
    }
  }
}
